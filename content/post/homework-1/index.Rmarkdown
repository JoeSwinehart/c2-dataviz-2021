---
title: Homework 1
subtitle: Creating new visualizations through joins
author: Daniel Anderson
date: '2021-01-07'
assigned: '2021-01-20'
due: '2021-02-03'
slug: homework-1
categories:
  - Assignment
tags:
  - Assignments
  - Homework
toc: true
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(message = FALSE,
                      warning = FALSE,
                      echo = FALSE,
                      dev.args = list(bg="transparent"),
                      fig.height = 12)

```

## Background
For this homework we will use data from [Kaggle](https://www.kaggle.com). Kaggle is an online data science platform that began as a competitive platform for predictive modeling problems. Private organizations would offer a prize, usually in the range of $25K-$100K, for the individual or team that could provide the best predictive model for their problem. This is still a primary function of the website (see active competitions [here](https://www.kaggle.com/competitions)), but the it has grown and is now also a place to share datasets, compete in *open* competitions (where you can see others code), and generally learn different facets and approaches to data science in an applied way.

### Getting Started
You can download the data we'll use for this homework either [from Kaggle](https://www.kaggle.com/rocki37/open-university-learning-analytics-dataset) (requires you create an account with Kaggle) or [directly from the organization](https://analyse.kmi.open.ac.uk/open_dataset). The latter link is worth examining to learn more about the data, regardless.

A total of seven datasets (tables) related to an online learning analytics project should be included with your download. A number of keys link the various sources of data. I recommend reading through the documentation provided by the organization to better understand these keys.

## Assignment
The primary components of this assignment are highly open-ended. These are to

1. Use at least 3 mutating joins
2. Use at least 1 filtering join
3. Produce at least 3 data displays

Following the completion of these requirements, please reproduce the following figure.

```{r include = FALSE}
library(tidyverse)
theme_set(theme_minimal(15) +
	theme(plot.title.position = "plot"))

stu_assess <- read_csv(here::here("data", "kaggle-data", "studentAssessment.csv")) 
stu_info <- read_csv(here::here("data", "kaggle-data", "studentInfo.csv")) 
assessments <- read_csv(here::here("data", "kaggle-data", "assessments.csv")) 
regist <- read_csv(here::here("data", "kaggle-data", "studentRegistration.csv"))

assessments %>%
	count(id_assessment) %>%
	filter(n > 1)

stu_assess %>%
	count(id_student, id_assessment) %>%
	filter(n > 1)

stu_info %>%
	count(id_student, code_module, code_presentation) %>%
	filter(n > 1)

left_join(stu_assess, assessments) %>%
	count(id_student, id_assessment) %>%
	filter(n > 1)

d <- left_join(stu_assess, assessments) %>%
	left_join(stu_info)

regist %>% 
  count(id_student, code_module, code_presentation) %>% 
  filter(n > 1)

d <- left_join(d, regist)

# anti join example
# Imagine you're interested in looking at the distributions of
# time elapsed between the date the assessment was taken and the 
# date it was submitted by code module.

# First, note that many students took multiple code modules
d %>%
	count(code_module, id_student)

# So let's compute the average time elapsed by code modules 
# for each student
sub_by_code <- d %>%
	mutate(sub_date_diff = date_submitted - date) %>%
	group_by(id_student, code_module) %>%
	summarize(mean_sub_date_diff = mean(sub_date_diff, na.rm = TRUE))

# Let's plot these distributions
ggplot(sub_by_code, aes(mean_sub_date_diff)) +
		geom_histogram() +
		facet_wrap(~code_module)

# Notice there's a huge spike right around zero for many of these, which
# makes sense, but it also makes it difficult to really see the distribution 
# for many of them. Let's remove just those cases around zero so we have can
# better see the *rest* of the distribution.

cases_to_remove <- sub_by_code %>%
	filter(mean_sub_date_diff > -10 & mean_sub_date_diff < 10)

# The code above creates a new dataset that *includes* only the cases within
# 10 minutes of zero. We'll then eliminate these from the dataset we plotted 
# earlier by using an `anti_join()`. In other words, it will match based on the
# `code_module` and `id_student` and remove that row if there is a match. 
sub_by_code %>%
	anti_join(cases_to_remove) %>%
	ggplot(aes(mean_sub_date_diff)) +
		geom_histogram() +
		facet_wrap(~code_module)

# We could play with the distance from zero, but we're now in a much
# better position to see the "outlier" scores.
```

```{r}
pd <- d %>%
	filter(assessment_type == "TMA") %>%
	group_by(highest_education, final_result, gender) %>%
	summarize(mean_score = mean(score, na.rm = TRUE),
	          .groups = "drop") %>%
	mutate(highest_education = fct_reorder(highest_education, mean_score),
	       final_result = fct_reorder(final_result, mean_score)) %>%
	rename(Gender = gender)

ggplot(pd, aes(mean_score, highest_education)) +
	geom_line(color = "gray40", size = 3) +
  geom_point(aes(color = Gender), size = 5) +
	facet_wrap(~final_result, ncol = 1) +
	scale_color_brewer(palette = "Paired") +
	labs(y = "Average Score",
	     x = "Highest Education",
	     title = "Average TMA Scores",
	     subtitle = "Results displayed by Education, gender, and Final Result Designation",
	     caption = "Data from Kuzilek, Hlosta, & Zdrahal (2017). \nhttps://analyse.kmi.open.ac.uk/open_dataset") 
``` 

## Extra credit
For one point extra credit, modify the lines so the plot looks like the below

```{r extracredit}
pd <- pd %>% 
  pivot_wider(
    names_from = Gender,
    values_from = mean_score
  ) %>% 
  mutate(higher_group = ifelse(`F` > M, "Female", "Male")) %>% 
  pivot_longer(
    cols = c(`F`, M), 
    names_to = "Gender",
    values_to = "mean_score"
  ) %>% 
  mutate(Gender = ifelse(Gender == "F", "Female", "Male"))

ggplot(pd, aes(mean_score, highest_education)) +
	geom_line(aes(color = higher_group), size = 3) +
  geom_point(aes(fill = Gender), shape = 21, stroke = 0, size = 5) +
	facet_wrap(~final_result, ncol = 1) +
	scale_color_brewer("Higher Mean", palette = "Pastel1") +
  scale_fill_brewer(palette = "Paired") +
	labs(y = "Average Score",
	     x = "Highest Education",
	     title = "Average TMA Scores",
	     subtitle = "Results displayed by Education, gender, and Final Result Designation",
	     caption = "Data from Kuzilek, Hlosta, & Zdrahal (2017). \nhttps://analyse.kmi.open.ac.uk/open_dataset") +
  theme(legend.position = "bottom",
        legend.title = element_text(size = 11),
        legend.text = element_text(size = 8))
```